def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '0.9.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('./key/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.neofect.connect"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storePassword "Neofect@Connect!"
            keyPassword "Neofect@Connect!"
            storeFile file('./key/key.jks')
            keyAlias "key"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    /*
    flavorDimensions "production"

    productFlavors {
        dev {
            dimension "production"
            // versionNameSuffix "-dev"
            // applicationNameSuffix ".dev"
            //packageBuildConfig false
        }

        stage {
            dimension "production"
            // versionNameSuffix "-dev"
            // applicationNameSuffix ".dev"
            // packageBuildConfig false
        }

        live {
            dimension "production"
            // versionNameSuffix "-dev"
            // applicationNameSuffix ".dev"
            // packageBuildConfig false
        }
    }
    */

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
    }

    buildToolsVersion = '28.0.3'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    /// implementation 'com.google.gms:google-services:4.3.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    //lifecycle
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    //appsflyer
    implementation 'com.appsflyer:af-android-sdk:5.0.0'
    implementation 'com.android.installreferrer:installreferrer:1.1'

    implementation 'com.google.firebase:firebase-messaging:20.1.5'

    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
}

apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
